<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WangWangZhou Blog</title>
  
  <subtitle>WangWangZhou Blog</subtitle>
  <link href="http://wangwang2020.gitee.io/atom.xml" rel="self"/>
  
  <link href="http://wangwang2020.gitee.io/"/>
  <updated>2020-10-11T08:17:22.778Z</updated>
  <id>http://wangwang2020.gitee.io/</id>
  
  <author>
    <name>WangWangZhou</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>968. 监控二叉树</title>
    <link href="http://wangwang2020.gitee.io/2020/09/23/968-%E7%9B%91%E6%8E%A7%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://wangwang2020.gitee.io/2020/09/23/968-%E7%9B%91%E6%8E%A7%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2020-09-23T00:37:00.000Z</published>
    <updated>2020-10-11T08:17:22.778Z</updated>
    
    <content type="html"><![CDATA[<h1 id="968-监控二叉树"><a href="#968-监控二叉树" class="headerlink" title="968. 监控二叉树"></a><a href="https://leetcode-cn.com/problems/binary-tree-cameras/">968. 监控二叉树</a></h1><p>给定一个二叉树，我们在树的节点上安装摄像头。</p><p>节点上的每个摄影头都可以监视<strong>其父对象、自身及其直接子对象。</strong></p><p>计算监控树的所有节点所需的最小摄像头数量。</p><p> <strong>示例 1：</strong></p><p><img src="https://xinqianpingtaib2btest.oss-cn-shenzhen.aliyuncs.com/xinqianpingtaib2btest/blogimg/2020/bst_cameras_01.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：[0,0,null,0,0]</span><br><span class="line">输出：1</span><br><span class="line">解释：如图所示，一台摄像头足以监控所有节点。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://xinqianpingtaib2btest.oss-cn-shenzhen.aliyuncs.com/xinqianpingtaib2btest/blogimg/2020/bst_cameras_02.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：[0,0,null,0,null,0,null,null,0]</span><br><span class="line">输出：2</span><br><span class="line">解释：需要至少两个摄像头来监视树的所有节点。 上图显示了摄像头放置的有效位置之一。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ol><li>给定树的节点数的范围是 [1, 1000]。</li><li>每个节点的值都是 0。</li></ol><h1 id="java代码"><a href="#java代码" class="headerlink" title="java代码"></a>java代码</h1><p>这是一道hard难度的题目。我们要从底向上进行推导，因为尽量让叶子节点的父节点安装摄像头，这样摄像头的数量才是最少的。<br>如何从低向上推导呢？<br>采用后序遍历也就是左右中的顺序，这样就可以从下到上进行推导了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//NO_CAMERA表示的是子节点没有相机，当前节点也没放相机</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> NO_CAMERA = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//HAS_CAMERA表示当前节点有一个相机</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> HAS_CAMERA = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//NO_NEEDED表示当前节点没有相机，但他的子节点有一个相机，把它给</span></span><br><span class="line">    <span class="comment">//覆盖了，所以它不需要了。或者他是一个空的节点也是不需要相机的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> NO_NEEDED = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//全局的，统计有多少相机</span></span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCameraCover</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//边界条件判断</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//如果最后返回的是NO_CAMERA，表示root节点的子节点也没有相机，</span></span><br><span class="line">        <span class="comment">//所以root节点要添加一个相机</span></span><br><span class="line">        <span class="keyword">if</span> (dfs(root) == NO_CAMERA)</span><br><span class="line">            res++;</span><br><span class="line">        <span class="comment">//返回结果</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果是空的，就不需要相机了</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> NO_NEEDED;</span><br><span class="line">        <span class="keyword">int</span> left = dfs(root.left);</span><br><span class="line">        <span class="keyword">int</span> right = dfs(root.right);</span><br><span class="line">        <span class="comment">//如果左右子节点有一个是NO_CAMERA，表示的是子节点既没相机，也没相机覆盖它，</span></span><br><span class="line">        <span class="comment">//所以当前节点需要有一个相机</span></span><br><span class="line">        <span class="keyword">if</span> (left == NO_CAMERA || right == NO_CAMERA) &#123;</span><br><span class="line">            <span class="comment">//在当前节点放一个相机，统计相机的个数</span></span><br><span class="line">            res++;</span><br><span class="line">            <span class="keyword">return</span> HAS_CAMERA;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果左右子节点只要有一个有相机，那么当前节点就不需要相机了，否则返回一个没有相机的标记</span></span><br><span class="line">        <span class="keyword">return</span> (left == HAS_CAMERA || right == HAS_CAMERA) ? NO_NEEDED : NO_CAMERA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="cpp代码"><a href="#cpp代码" class="headerlink" title="cpp代码"></a>cpp代码</h2><p>状态</p><ul><li>0：该节点无覆盖，(说明，左孩子有覆盖，右孩子有覆盖，那么此时中间节点应该就是无覆盖的状态了。)</li><li>1：本节点有摄像头</li><li>2：本节点有覆盖</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> result;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">traversal</span><span class="params">(TreeNode* cur)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 空节点，该节点有覆盖</span></span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> left = traversal(cur-&gt;left);    <span class="comment">// 左</span></span><br><span class="line">        <span class="keyword">int</span> right = traversal(cur-&gt;right);  <span class="comment">// 右</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//先考虑左右节点，再考虑中间节点，所以采用后序遍历</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 情况1 - - - - - - 左右节点都有覆盖</span></span><br><span class="line">        <span class="comment">// 左右节点都有覆盖</span></span><br><span class="line">        <span class="keyword">if</span> (left == <span class="number">2</span> &amp;&amp; right == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 情况2 - - - - - - - - - - - -- - - - 左右节点至少有一个无覆盖的情况</span></span><br><span class="line">        <span class="comment">// left == 0 &amp;&amp; right == 0 左右节点无覆盖</span></span><br><span class="line">        <span class="comment">// left == 1 &amp;&amp; right == 0 左节点有摄像头，右节点无覆盖</span></span><br><span class="line">        <span class="comment">// left == 0 &amp;&amp; right == 1 左节点有无覆盖，右节点摄像头</span></span><br><span class="line">        <span class="comment">// left == 0 &amp;&amp; right == 2 左节点无覆盖，右节点覆盖</span></span><br><span class="line">        <span class="comment">// left == 2 &amp;&amp; right == 0 左节点覆盖，右节点无覆盖</span></span><br><span class="line">        <span class="keyword">if</span> (left == <span class="number">0</span> || right == <span class="number">0</span>) &#123;</span><br><span class="line">            result++;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 情况3 - - - - - - - - - - - - - - - - - - - - 左右节点至少有一个有摄像头</span></span><br><span class="line">        <span class="comment">// left == 1 &amp;&amp; right == 2 左节点有摄像头，右节点有覆盖</span></span><br><span class="line">        <span class="comment">// left == 2 &amp;&amp; right == 1 左节点有覆盖，右节点有摄像头</span></span><br><span class="line">        <span class="comment">// left == 1 &amp;&amp; right == 1 左右节点都有摄像头</span></span><br><span class="line">        <span class="comment">// 其他情况前段代码均已覆盖</span></span><br><span class="line">        <span class="keyword">if</span> (left == <span class="number">1</span> || right == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以上代码我没有使用else，主要是为了把各个分支条件展现出来，这样代码有助于读者理解</span></span><br><span class="line">        <span class="comment">// 这个 return -1 逻辑不会走到这里。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minCameraCover</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        result = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 情况4</span></span><br><span class="line">        <span class="keyword">if</span> (traversal(root) == <span class="number">0</span>) &#123; <span class="comment">// root 无覆盖</span></span><br><span class="line">            result++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://leetcode-cn.com/problems/binary-tree-cameras/solution/jian-kong-er-cha-shu-by-leetcode-solution/">监控二叉树</a></p><p><a href="https://leetcode-cn.com/problems/binary-tree-cameras/solution/968-jian-kong-er-cha-shu-di-gui-shang-de-zhuang-ta/">968. 监控二叉树:【递归上的状态转移】详解</a></p><p><a href="https://leetcode-cn.com/problems/binary-tree-cameras/solution/cong-xia-wang-shang-ji-suan-ji-bai-liao-100de-yong/">从下往上计算，击败了100%的用户</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;968-监控二叉树&quot;&gt;&lt;a href=&quot;#968-监控二叉树&quot; class=&quot;headerlink&quot; title=&quot;968. 监控二叉树&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/binary-tree-came</summary>
      
    
    
    
    <category term="leetcode" scheme="http://wangwang2020.gitee.io/categories/leetcode/"/>
    
    
    <category term="java" scheme="http://wangwang2020.gitee.io/tags/java/"/>
    
    <category term="贪心" scheme="http://wangwang2020.gitee.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
    <category term="后序遍历" scheme="http://wangwang2020.gitee.io/tags/%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>hexo资料</title>
    <link href="http://wangwang2020.gitee.io/2020/09/21/hexo%E8%B5%84%E6%96%99-1/"/>
    <id>http://wangwang2020.gitee.io/2020/09/21/hexo%E8%B5%84%E6%96%99-1/</id>
    <published>2020-09-21T03:04:00.000Z</published>
    <updated>2020-09-21T03:06:20.927Z</updated>
    
    <content type="html"><![CDATA[<p>hexo文档<br><a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p><p>hexo next主题<br><a href="https://theme-next.iissnan.com/getting-started.html">https://theme-next.iissnan.com/getting-started.html</a></p><p>hexo常用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g   &#x2F;&#x2F;安装  </span><br><span class="line">npm update hexo -g   &#x2F;&#x2F;升级 </span><br><span class="line">hexo version        &#x2F;&#x2F;查看hexo的版本</span><br><span class="line">hexo init nodejs-hexo   &#x2F;&#x2F;创建nodejs-hexo 名字的本地文件</span><br><span class="line">hexo init nodejs-hexo    &#x2F;&#x2F;创建博客</span><br><span class="line">hexo init blog          &#x2F;&#x2F;初始化，生成文件夹为blog</span><br><span class="line">cd blog               &#x2F;&#x2F;进入blog文件夹</span><br><span class="line">npm install            &#x2F;&#x2F;安装依赖库</span><br><span class="line">hexo generate           &#x2F;&#x2F;生成一套静态网页</span><br><span class="line">hexo server         &#x2F;&#x2F;运行测试,浏览器打开地址，http:&#x2F;&#x2F;localhost:4000&#x2F;</span><br><span class="line">hexo deploy         &#x2F;&#x2F;进行部署</span><br><span class="line"></span><br><span class="line">hexo new &quot;new article&quot;  &#x2F;&#x2F;新建文章‘new article’</span><br><span class="line">hexo new page &quot;about&quot;  &#x2F;&#x2F;新建页面 ‘about’</span><br><span class="line"></span><br><span class="line">hexo n &quot;我的博客&quot;&#96; &#x3D;&#x3D; &#96;hexo new&#96; &quot;我的博客&quot;    &#x2F;&#x2F;新建文章</span><br><span class="line">hexo g &#x3D;&#x3D; hexo generate        &#x2F;&#x2F;生成&#96;</span><br><span class="line">hexo s &#x3D;&#x3D; hexo server          &#x2F;&#x2F;启动服务预览</span><br><span class="line">hexo d &#x3D;&#x3D; hexo deploy          &#x2F;&#x2F;部署</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;hexo文档&lt;br&gt;&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot;&gt;https://hexo.io/zh-cn/docs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;hexo next主题&lt;br&gt;&lt;a href=&quot;https://theme-next.iissnan</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>LeetCode课程表</title>
    <link href="http://wangwang2020.gitee.io/2019/12/23/LeetCode%E8%AF%BE%E7%A8%8B%E8%A1%A8/"/>
    <id>http://wangwang2020.gitee.io/2019/12/23/LeetCode%E8%AF%BE%E7%A8%8B%E8%A1%A8/</id>
    <published>2019-12-23T09:03:00.000Z</published>
    <updated>2020-09-21T03:11:40.182Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>现在你总共有 n 门课需要选，记为 <code>0</code> 到 <code>n-1</code>。</p><p>在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: <code>[0,1]</code></p><p>给定课程总量以及它们的先决条件，判断是否可能完成所有课程的学习？</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: 2, [[1,0]] </span><br><span class="line">输出: true</span><br><span class="line">解释: 总共有 2 门课程。学习课程 1 之前，你需要完成课程 0。所以这是可能的。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: 2, [[1,0],[0,1]]</span><br><span class="line">输出: false</span><br><span class="line">解释: 总共有 2 门课程。学习课程 1 之前，你需要先完成​课程 0；并且学习课程 0 之前，你还应先完成课程 1。这是不可能的。</span><br></pre></td></tr></table></figure><p>说明:</p><p>输入的先决条件是由边缘列表表示的图形，而不是邻接矩阵。详情请参见图的表示法。<br>你可以假定输入的先决条件中没有重复的边。<br>提示:</p><p>这个问题相当于查找一个循环是否存在于有向图中。如果存在循环，则不存在拓扑排序，因此不可能选取所有课程进行学习。<br>通过 DFS 进行拓扑排序 - 一个关于Coursera的精彩视频教程（21分钟），介绍拓扑排序的基本概念。<br>拓扑排序也可以通过 BFS 完成。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="方法1：广度优先遍历"><a href="#方法1：广度优先遍历" class="headerlink" title="方法1：广度优先遍历"></a>方法1：广度优先遍历</h2><p>我们使用一个队列来进行广度优先搜索。初始时，所有入度为 0 的节点都被放入队列中，它们就是可以作为拓扑排序最前面的节点，并且它们之间的相对顺序是无关紧要的。</p><p>在广度优先搜索的每一步中，我们取出队首的节点 u：</p><p>我们将 u 放入答案中；</p><p>我们移除 u 的所有出边，也就是将 u 的所有相邻节点的入度减少 11。如果某个相邻节点 v 的入度变为 0，那么我们就将 v 放入队列中。</p><p>在广度优先搜索的过程结束后。如果答案中包含了这 n 个节点，那么我们就找到了一种拓扑排序，否则说明图中存在环，也就不存在拓扑排序了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canFinish</span><span class="params">(<span class="keyword">int</span> numCourses, <span class="keyword">int</span> prerequisites)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] indegrees = <span class="keyword">new</span> <span class="keyword">int</span>[numCourses];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] cp : prerequisites) indegrees[cp[<span class="number">0</span>]]++;<span class="comment">//入度增加</span></span><br><span class="line"></span><br><span class="line">        LinkedList&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(indegrees[i] == <span class="number">0</span>) queue.addLast(i);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line">            Integer pre = queue.removeFirst();</span><br><span class="line"></span><br><span class="line">            numCourses--;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span>[] req : prerequisites) &#123;<span class="comment">//循环二维数组</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(req[<span class="number">1</span>] != pre) <span class="keyword">continue</span>;<span class="comment">//判断是不是依赖这一门课，如果不是，就跳过</span></span><br><span class="line">                <span class="comment">//如果是这门课,入席数组减减</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(--indegrees[req[<span class="number">0</span>]] == <span class="number">0</span>) queue.add(req[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> numCourses == <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="方法2：深度优先遍历"><a href="#方法2：深度优先遍历" class="headerlink" title="方法2：深度优先遍历"></a>方法2：深度优先遍历</h2><p>对于图中的任意一个节点，它在搜索的过程中有三种状态，即：</p><ul><li><p>「未搜索」：我们还没有搜索到这个节点；</p></li><li><p>「搜索中」：我们搜索过这个节点，但还没有回溯到该节点，即该节点还没有入栈，还有相邻的节点没有搜索完成）；</p></li><li><p>「已完成」：我们搜索过并且回溯过这个节点，即该节点已经入栈，并且所有该节点的相邻节点都出现在栈的更底部的位置，满足拓扑排序的要求。</p></li></ul><p>通过上述的三种状态，我们就可以给出使用深度优先搜索得到拓扑排序的算法流程，在每一轮的搜索搜索开始时，我们任取一个「未搜索」的节点开始进行深度优先搜索。</p><p>我们将当前搜索的节点 u 标记为「搜索中」，遍历该节点的每一个相邻节点 v：</p><ul><li><p>如果 v 为「未搜索」，那么我们开始搜索 v，待搜索完成回溯到 u；</p></li><li><p>如果 v 为「搜索中」，那么我们就找到了图中的一个环，因此是不存在拓扑排序的；</p></li><li><p>如果 v 为「已完成」，那么说明 v 已经在栈中了，而 u 还不在栈中，因此 u 无论何时入栈都不会影响到 (u,v) 之前的拓扑关系，以及不用进行任何操作。</p></li></ul><p>当 u 的所有相邻节点都为「已完成」时，我们将 u 放入栈中，并将其标记为「已完成」。</p><p>在整个深度优先搜索的过程结束后，如果我们没有找到图中的环，那么栈中存储这所有的 n 个节点，从栈顶到栈底的顺序即为一种拓扑排序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; edges;</span><br><span class="line">    int[] visited;</span><br><span class="line">    boolean valid &#x3D; true;</span><br><span class="line"></span><br><span class="line">    public boolean canFinish(int numCourses, int[][] prerequisites) &#123;</span><br><span class="line">        edges &#x3D; new ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        for (int i &#x3D; 0; i &lt; numCourses; ++i) &#123;</span><br><span class="line">            edges.add(new ArrayList&lt;Integer&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        visited &#x3D; new int[numCourses];</span><br><span class="line">        for (int[] info : prerequisites) &#123;</span><br><span class="line">            edges.get(info[1]).add(info[0]);</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; numCourses &amp;&amp; valid; ++i) &#123;</span><br><span class="line">            if (visited[i] &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                dfs(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return valid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void dfs(int u) &#123;</span><br><span class="line">        visited[u] &#x3D; 1;</span><br><span class="line">        for (int v: edges.get(u)) &#123;</span><br><span class="line">            if (visited[v] &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                dfs(v);</span><br><span class="line">                if (!valid) &#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else if (visited[v] &#x3D;&#x3D; 1) &#123;</span><br><span class="line">                valid &#x3D; false;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[u] &#x3D; 2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;现在你总共有 n 门课需要选，记为 &lt;code&gt;0&lt;/code&gt; 到 &lt;code&gt;n-1&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在选修某些课程之前需</summary>
      
    
    
    
    
    <category term="leetcode" scheme="http://wangwang2020.gitee.io/tags/leetcode/"/>
    
    <category term="BFS" scheme="http://wangwang2020.gitee.io/tags/BFS/"/>
    
    <category term="DFS" scheme="http://wangwang2020.gitee.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>地下城游戏(dungeon-game)</title>
    <link href="http://wangwang2020.gitee.io/2019/12/10/%E5%9C%B0%E4%B8%8B%E5%9F%8E%E6%B8%B8%E6%88%8F-dungeon-game/"/>
    <id>http://wangwang2020.gitee.io/2019/12/10/%E5%9C%B0%E4%B8%8B%E5%9F%8E%E6%B8%B8%E6%88%8F-dungeon-game/</id>
    <published>2019-12-10T08:32:00.000Z</published>
    <updated>2020-09-23T02:14:55.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>一些恶魔抓住了公主（P）并将她关在了地下城的右下角。地下城是由 M x N 个房间组成的二维网格。我们英勇的骑士（K）最初被安置在左上角的房间里，他必须穿过地下城并通过对抗恶魔来拯救公主。</p><p>骑士的初始健康点数为一个正整数。如果他的健康点数在某一时刻降至 0 或以下，他会立即死亡。</p><p>有些房间由恶魔守卫，因此骑士在进入这些房间时会失去健康点数（若房间里的值为负整数，则表示骑士将损失健康点数）；其他房间要么是空的（房间里的值为 0），要么包含增加骑士健康点数的魔法球（若房间里的值为正整数，则表示骑士将增加健康点数）。</p><p>为了尽快到达公主，骑士决定每次只向右或向下移动一步。</p><p>编写一个函数来计算确保骑士能够拯救到公主所需的最低初始健康点数。</p><p>例如，考虑到如下布局的地下城，如果骑士遵循最佳路径 右 -&gt; 右 -&gt; 下 -&gt; 下，则骑士的初始健康点数至少为 7。</p><p>-2 (K)    -3    3<br>-5    -10    1<br>10    30    -5 (P)</p><p>说明:</p><p>骑士的健康点数没有上限。</p><p>任何房间都可能对骑士的健康点数造成威胁，也可能增加骑士的健康点数，包括骑士进入的左上角房间以及公主被监禁的右下角房间。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>参考了评论中的答案，使用动态规划 核心思路是：每次只能往右边或者下面走，那么如果你知道了往右边走需要的最小生命代价和往下面需要的最小生命代价，那么你就知道了当前需要的最小代价 使用二维数组来保存最小生命代价，life[i][j]表示从i，j开始走到右下角的最小生命代价 从右下开始往上动态规划，初始话最小代价是1，如果当前不需要额外的生命代价的话，那么当前的最小生命代价就是1，如果需要额外的代价的话，那么最小生命代价就是额外需要的代价。 说的比较绕口，代码应该比较好理解，总的思路就是，如果后面不需要额外生命，那么你只需要保证能走到当前就可以了，如果后面需要额外代价，那么你需要保证能走到当前并且+后面的额外生命代价</p><h2 id="java代码"><a href="#java代码" class="headerlink" title="java代码"></a>java代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 求骑士走到右下角的最低生命值</span></span><br><span class="line">    <span class="comment">// 只能右或者下</span></span><br><span class="line">    <span class="comment">// DP</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculateMinimumHP</span><span class="params">(<span class="keyword">int</span>[][] dungeon)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = dungeon.length;</span><br><span class="line">        <span class="keyword">int</span> col = dungeon[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[][] life = <span class="keyword">new</span> <span class="keyword">int</span>[row][col]; <span class="comment">// life[i][j] 表示i,j的时候需要的最小生命值，肯定不能小于1</span></span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        <span class="keyword">if</span>(dungeon[row - <span class="number">1</span>][col - <span class="number">1</span>] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            life[row - <span class="number">1</span>][col - <span class="number">1</span>] = -dungeon[row - <span class="number">1</span>][col - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            life[row - <span class="number">1</span>][col - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 初始化最后一列</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = row - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(life[i+<span class="number">1</span>][col-<span class="number">1</span>] == <span class="number">1</span>)&#123; <span class="comment">// 表示后面的可以自己满足</span></span><br><span class="line">                life[i][col-<span class="number">1</span>] = Math.max(<span class="number">1</span>,-dungeon[i][col - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123; <span class="comment">// 后面的不可以满足</span></span><br><span class="line">                life[i][col-<span class="number">1</span>] = Math.max(life[i+<span class="number">1</span>][col-<span class="number">1</span>] - dungeon[i][col - <span class="number">1</span>],<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 初始话最后一行</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = col - <span class="number">2</span>; j &gt;= <span class="number">0</span>; j --)&#123;</span><br><span class="line">            <span class="keyword">if</span>(life[row - <span class="number">1</span>][j+<span class="number">1</span>] == <span class="number">1</span>)&#123;</span><br><span class="line">                life[row-<span class="number">1</span>][j] = Math.max(<span class="number">1</span>,-dungeon[row-<span class="number">1</span>][j]+<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                life[row-<span class="number">1</span>][j] = Math.max(life[row-<span class="number">1</span>][j+<span class="number">1</span>]-dungeon[row-<span class="number">1</span>][j],<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = row - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = col - <span class="number">2</span>; j&gt;= <span class="number">0</span>; j--)&#123;</span><br><span class="line">                <span class="keyword">int</span> min = Math.min(life[i][j+<span class="number">1</span>],life[i+<span class="number">1</span>][j]);</span><br><span class="line">                <span class="keyword">if</span>(min == <span class="number">1</span>)&#123; <span class="comment">// 后面可以满足</span></span><br><span class="line">                    life[i][j] = Math.max(<span class="number">1</span>,-dungeon[i][j]+<span class="number">1</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    life[i][j] = Math.max(<span class="number">1</span>,min-dungeon[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> life[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="python代码"><a href="#python代码" class="headerlink" title="python代码"></a>python代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculateMinimumHP</span>(<span class="params">self, dungeon</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type dungeon: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        row, col = len(dungeon), len(dungeon[<span class="number">0</span>])</span><br><span class="line">        mem = [[<span class="number">0</span>]*col <span class="keyword">for</span> _ <span class="keyword">in</span> range(row)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(row<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(col<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">                <span class="keyword">if</span> i == row<span class="number">-1</span> <span class="keyword">and</span> j == col<span class="number">-1</span>:</span><br><span class="line">                    mem[i][j] = max(<span class="number">0</span>, -dungeon[i][j])</span><br><span class="line">                <span class="keyword">elif</span> i == row<span class="number">-1</span>:</span><br><span class="line">                    mem[i][j] = max(<span class="number">0</span>, mem[i][j+<span class="number">1</span>] - dungeon[i][j])</span><br><span class="line">                <span class="keyword">elif</span> j == col<span class="number">-1</span>:</span><br><span class="line">                    mem[i][j] = max(<span class="number">0</span>, mem[i+<span class="number">1</span>][j] - dungeon[i][j])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    mem[i][j] = max(<span class="number">0</span>, min(mem[i+<span class="number">1</span>][j], mem[i][j+<span class="number">1</span>]) - dungeon[i][j])</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> mem[<span class="number">0</span>][<span class="number">0</span>] + <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;一些恶魔抓住了公主（P）并将她关在了地下城的右下角。地下城是由 M x N 个房间组成的二维网格。我们英勇的骑士（K）最初被安置在左上角的房</summary>
      
    
    
    
    <category term="刷题" scheme="http://wangwang2020.gitee.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="leetcode" scheme="http://wangwang2020.gitee.io/categories/%E5%88%B7%E9%A2%98/leetcode/"/>
    
    
    <category term="java" scheme="http://wangwang2020.gitee.io/tags/java/"/>
    
    <category term="动态规划" scheme="http://wangwang2020.gitee.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>最小路径和(minimum-path-sum)</title>
    <link href="http://wangwang2020.gitee.io/2019/12/09/%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C-minimum-path-sum/"/>
    <id>http://wangwang2020.gitee.io/2019/12/09/%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C-minimum-path-sum/</id>
    <published>2019-12-09T13:31:00.000Z</published>
    <updated>2019-12-13T11:49:21.467Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p><p>说明：每次只能向下或者向右移动一步。</p><p><strong>示例:</strong> </p><p><strong>输入:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [1,3,1],</span><br><span class="line">  [1,5,1],</span><br><span class="line">  [4,2,1]</span><br><span class="line">]</span><br><span class="line">输出:  7</span><br><span class="line">解释:  因为路径 1→3→1→1→1 的总和最小。</span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[grid.length][grid[<span class="number">0</span>].length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = grid.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = grid[<span class="number">0</span>].length - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i == grid.length - <span class="number">1</span> &amp;&amp; j != grid[<span class="number">0</span>].length - <span class="number">1</span>)</span><br><span class="line">                    dp[i][j] = grid[i][j] +  dp[i][j + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j == grid[<span class="number">0</span>].length - <span class="number">1</span> &amp;&amp; i != grid.length - <span class="number">1</span>)</span><br><span class="line">                    dp[i][j] = grid[i][j] + dp[i + <span class="number">1</span>][j];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j != grid[<span class="number">0</span>].length - <span class="number">1</span> &amp;&amp; i != grid.length - <span class="number">1</span>)</span><br><span class="line">                    dp[i][j] = grid[i][j] + Math.min(dp[i + <span class="number">1</span>][j], dp[i][j + <span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[i][j] = grid[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。&lt;/p&gt;
&lt;p&gt;说明：每次只能向下或</summary>
      
    
    
    
    
    <category term="java" scheme="http://wangwang2020.gitee.io/tags/java/"/>
    
    <category term="动态规划" scheme="http://wangwang2020.gitee.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>win10 安装docker</title>
    <link href="http://wangwang2020.gitee.io/2018/12/07/win10-%E5%AE%89%E8%A3%85docker/"/>
    <id>http://wangwang2020.gitee.io/2018/12/07/win10-%E5%AE%89%E8%A3%85docker/</id>
    <published>2018-12-07T10:49:05.000Z</published>
    <updated>2018-12-07T15:57:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker介绍"><a href="#Docker介绍" class="headerlink" title="Docker介绍"></a>Docker介绍</h1><p>Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从Apache2.0协议开源。<br>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。<br>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p><h2 id="Docker基本概念"><a href="#Docker基本概念" class="headerlink" title="Docker基本概念"></a>Docker基本概念</h2><p>docker包含三个基本概念：<br>镜像（Image）<br>容器（Container）<br>仓库（Repository）<br>理解了这三个概念，就理解了docker的整个生命周期了！</p><h3 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h3><p>Docker镜像（Image）就是一个只读的模板。<br>Docker镜像可以用来创建Docker容器。</p><p>Docker镜像和Docker容器的关系，类似于java中class类与对象之间的关系。</p><p>Docker提供了一个很简单的机制来创建镜像或者更新已有的镜像，用户甚至可以直接从其他人那里下载一个已经做好的镜像来直接使用。</p><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>Docker利用容器（Container）来运行应用。<br>容器是从镜像创建的运行实例。它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。</p><p>可以把容器看成是一个简易版的Linux环境（包括ROOT用户权限、进程空间、用户空间、网络等）和运行在其中的应用程序。</p><h3 id="Registry"><a href="#Registry" class="headerlink" title="Registry"></a>Registry</h3><p>Registry是集中存放镜像文件的场所。<br>仓库（Repository）是对于其中的镜像进行分类管理。</p><p>一个Registry中会有多个Repository。<br>一个Repository中会有多个不同tag的Image。</p><p>比如名称为centos的Repository仓库下，有tag为6或者7的Image镜像。</p><p>Registry分为公有（public）和私有（private）两种形式。<br>最大的公有Registry是Docker Hub，存放了数量庞大的镜像供用户下载使用。<br>国内的公开Registry包括USTC、网易云、DaoCloud、AliCloud等，可以供大陆用户更稳当快捷的访问。<br>用户可以在本地创建一个私有Registry。</p><p>用户创建了自己的镜像之后就可以使用push命令将它上传的公有Registry或者私有Registry中，这样下次在另一台机器上使用这个镜像的时候，只需要从Registry上pull下来运行就可以了。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="docker官网下载"><a href="#docker官网下载" class="headerlink" title="docker官网下载"></a>docker官网下载</h2><p>首先在docker网站上注册一个账户，然后下载。<br><a href="https://docs.docker.com/docker-for-windows/install/#download-docker-for-windows">Docker for windows下载地址</a></p><h2 id="国内下载地址"><a href="#国内下载地址" class="headerlink" title="国内下载地址"></a>国内下载地址</h2><p>对于Windows 10以下的用户，推荐使用Docker Toolbox<br>Windows安装文件：<a href="http://mirrors.aliyun.com/docker-toolbox/windows/docker-toolbox/">http://mirrors.aliyun.com/docker-toolbox/windows/docker-toolbox/</a><br>对于Windows 10以上的用户 推荐使用Docker for Windows<br>Windows安装文件：<a href="http://mirrors.aliyun.com/docker-toolbox/windows/docker-for-windows/">http://mirrors.aliyun.com/docker-toolbox/windows/docker-for-windows/</a></p><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://docs.docker.com/docker-for-windows/install/">安装文档英文版</a><br>建议读一下英文版 。</p><h2 id="开启Hyper-v"><a href="#开启Hyper-v" class="headerlink" title="开启Hyper-v"></a>开启Hyper-v</h2><p>安装需要开启Hyper-V，如果是win10家庭版的话，可以需要升级win10专业版。可到某宝购买专业版的key。</p><p><img src="http://xinqianpingtaib2btest.oss-cn-shenzhen.aliyuncs.com/blogimg/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20181207185736.png" alt="CPU虚拟化"></p><p>控制面板-程序-windows功能<br><img src="http://xinqianpingtaib2btest.oss-cn-shenzhen.aliyuncs.com/blogimg/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20181207185832.png" alt="在这里插入图片描述"></p><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><p>安装时会有360报黑客新建帐号登录提示，这个还不太清楚，建议点允许。<br><img src="http://xinqianpingtaib2btest.oss-cn-shenzhen.aliyuncs.com/blogimg/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20181207191959.png" alt="360报docker黑客行为"></p><p><img src="http://xinqianpingtaib2btest.oss-cn-shenzhen.aliyuncs.com/blogimg/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20181207192221.png" alt="docker安装成功"></p><p><img src="http://xinqianpingtaib2btest.oss-cn-shenzhen.aliyuncs.com/blogimg/20181207222044.jpg" alt="在这里插入图片描述"></p><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p><img src="http://xinqianpingtaib2btest.oss-cn-shenzhen.aliyuncs.com/blogimg/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20181207192335.png" alt="docker登录"></p><h2 id="安装是否成功"><a href="#安装是否成功" class="headerlink" title="安装是否成功"></a>安装是否成功</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E:\&gt;docker --version</span><br><span class="line">Docker version 18.09.0, build 4d60db4</span><br></pre></td></tr></table></figure><h1 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello-world"></a>Hello-world</h1><h2 id="拉取helloWorld镜像"><a href="#拉取helloWorld镜像" class="headerlink" title="拉取helloWorld镜像"></a>拉取helloWorld镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">E:\&gt;docker pull hello-world</span><br><span class="line">Using default tag: latest</span><br><span class="line">Error response from daemon: </span><br><span class="line">Get https:&#x2F;&#x2F;registry-1.docker.io&#x2F;v2&#x2F;library&#x2F;hello-world&#x2F;manifests&#x2F;latest: </span><br><span class="line">net&#x2F;http: TLS handshake timeout</span><br></pre></td></tr></table></figure><p>发现下载不来</p><h2 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h2><p>Docker可以配置的国内镜像有很多可供选择，比如说：阿里云，网易蜂巢，DaoCloud，Docker中国区官方镜像等，这些都是可以提供给大家随意选择的不错的镜像仓库。</p><p><a href="https://jingyan.baidu.com/article/f3e34a12c607f4f5eb653596.html">阿里云docker镜像加速</a><br><strong>建议不要加端口号</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">    &quot;https:&#x2F;&#x2F;xxx.mirror.aliyuncs.com:443&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;insecure-registries&quot;: [],</span><br><span class="line">  &quot;debug&quot;: true,</span><br><span class="line">  &quot;experimental&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面的xxx是的你阿里云镜像加速地址。<br>再次下载，下载成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">E:\&gt;docker pull hello-world</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library&#x2F;hello-world</span><br><span class="line">d1725b59e92d: Pull complete</span><br><span class="line">Digest: sha256:0add3ace90ecb4adbf7777e9aacf1</span><br><span class="line">Status: Downloaded newer image for hello-world:latest</span><br></pre></td></tr></table></figure><p>运行hello-world</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E:\&gt;docker run hello-world</span><br><span class="line">Hello from Docker!</span><br></pre></td></tr></table></figure><h1 id="docker-命令"><a href="#docker-命令" class="headerlink" title="docker 命令"></a>docker 命令</h1><h2 id="docker镜像命令"><a href="#docker镜像命令" class="headerlink" title="docker镜像命令"></a>docker镜像命令</h2><h3 id="查找镜像"><a href="#查找镜像" class="headerlink" title="查找镜像"></a>查找镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E:\&gt;docker search centos</span><br><span class="line">NAME     DESCRIPTION      STARS               OFFICIAL            AUTOMATED</span><br><span class="line">centos          The official build of CentOS.              5020             [OK]</span><br></pre></td></tr></table></figure><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>拉取镜像也就是把镜像下载到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">E:\&gt;docker pull centos</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library&#x2F;centos</span><br><span class="line">a02a49cb5d: Extracting [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;     ]  69.07MB&#x2F;75.17MB</span><br></pre></td></tr></table></figure><h3 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h3><p>列出本地镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">E:\&gt;docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">centos              latest              1e1148e4cc2c        38 hours ago        202MB</span><br><span class="line">mysql               5.6                 a876cc5d29e4        3 weeks ago         256MB</span><br></pre></td></tr></table></figure><h2 id="docker容器"><a href="#docker容器" class="headerlink" title="docker容器"></a>docker容器</h2><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p>运行交互式的容器<br>这里的”1e1148e4cc2c”是上面docker  images列出来的镜像的 ID </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">E:\&gt;docker run -i -t 1e1148e4cc2c &#x2F;bin&#x2F;bash</span><br><span class="line">[root@33bab162592 &#x2F;]# ls</span><br><span class="line">anaconda-post.log  bin  dev  etc  home  lib  lib64  media  mnt  </span><br><span class="line">opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@33bab162592 &#x2F;]# cat &#x2F;etc&#x2F;centos-release</span><br><span class="line">CentOS Linux release 7.6.1810 (Core)</span><br><span class="line">[root@33bab162592 &#x2F;]# exit</span><br><span class="line">exit</span><br><span class="line">E:\&gt;</span><br></pre></td></tr></table></figure><p>我们通过docker的两个参数 -i -t，让docker运行的容器实现”对话”的能力<br>各个参数解析：<br>-t:在新容器内指定一个伪终端或终端。<br>-i:允许你对容器内的标准输入 (STDIN) 进行交互。</p><p>以交互方式启动容器：docker run -it –name 容器名称 镜像 /bin/bash<br>以守护进程方式启动容器：docker run -d –name 容器名称 镜像</p><h3 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h3><p>docker stop 容器名称或者容器ID</p><h3 id="重启容器"><a href="#重启容器" class="headerlink" title="重启容器"></a>重启容器</h3><p>docker start 容器名称或者容器ID</p><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><p>删除指定容器：docker rm 容器名称或者容器ID</p><p>删除所有容器：docker rm ‘docker ps -a -q’ </p><h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h3><p>docker ps ：查看正在运行的容器<br>docker ps -a：查看历史运行过的容器<br>docker ps -l：查看最近运行过的容器</p><h1 id="Docker-应用"><a href="#Docker-应用" class="headerlink" title="Docker 应用"></a>Docker 应用</h1><h2 id="windows下载docker搭建mysql"><a href="#windows下载docker搭建mysql" class="headerlink" title="windows下载docker搭建mysql"></a>windows下载docker搭建mysql</h2><p>下载mysql镜像 docker pull mysql，docker run运行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --rm --name ecMysql </span><br><span class="line">-v D:\docker\mysql:&#x2F;var&#x2F;lib&#x2F;mysql </span><br><span class="line">-v D:\docker\mysqlConf:&#x2F;etc&#x2F;mysql&#x2F;conf.d </span><br><span class="line">-e MYSQL_ROOT_PASSWORD&#x3D;123456 </span><br><span class="line">-p 3307:3306 mysql </span><br><span class="line">--character-set-server&#x3D;utf8mb4 </span><br><span class="line">--collation-server&#x3D;utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure><p>添加：–character-set-server=utf8mb4 –collation-server=utf8mb4_unicode_ci 防止中文乱码<br>参数解释：<br>-d 后台运行<br>–rm windows下stop后自动rm在stop ps中的镜像，linux下次参数不能使用<br>–name 给镜像起别名<br>-v 本地目录:镜像目录<br>-e 给镜像设置环境变量 MYSQL_ROOT_PASSWORD=123456这句为设置密码为123456<br>-p 暴露端口 格式– 本地端口:镜像端口<br>docker run [参数] 镜像名</p><p>进入mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">E:\&gt;docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE    COMMAND   CREATED             STATUS     PORTS  NAMES</span><br><span class="line">a4df   mysql:5.6   &quot;do…&quot;   5 seconds ago    Up 3 seconds  0.0.0.0:3307-&gt;3306&#x2F;tcp   ecMysql</span><br><span class="line"></span><br><span class="line">E:\&gt;docker exec -it ecMysql &#x2F;bin&#x2F;bash</span><br><span class="line">root@a4d15abc185:&#x2F;# mysql -u root -P 3307 -p</span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 3</span><br><span class="line">Server version: 5.6.42 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle and&#x2F;or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and&#x2F;or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>设置一个用户，方便远程登录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use mysql</span><br><span class="line">select Host,User from user;</span><br><span class="line">grant all on *.* to &#39;ddff&#39;@&#39;%&#39; identified by &#39;ddgg2018&#39;;</span><br></pre></td></tr></table></figure><p>添加远程访问账户<br>前面已经暴露端口，直接使用Navicat连接操作即可，当然你也可以用命令行 ，ip：127.0.0.1 用户名：ddff 密码：ddgg2018</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.runoob.com/docker/docker-tutorial.html">菜鸟教程 - docker教程</a></p><p><a href="https://blog.csdn.net/qq_26819733/article/details/79069981">window下搭建Docker的Mysql环境</a></p><p><a href="http://www.runoob.com/docker/docker-command-manual.html">docker 命令教程</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker介绍&quot;&gt;&lt;a href=&quot;#Docker介绍&quot; class=&quot;headerlink&quot; title=&quot;Docker介绍&quot;&gt;&lt;/a&gt;Docker介绍&lt;/h1&gt;&lt;p&gt;Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从Apache2.0协议开源。</summary>
      
    
    
    
    
  </entry>
  
</feed>
